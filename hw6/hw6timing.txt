1a. Results for InsertRandomSpeedTest for N = 1000000:
BSTStringSet = 1.32 sec;
ECHashStringSet = 0.55 sec;
java.util.TreeSet = 1.10 sec;
java.util.HashSet = 0.43 sec;

1b. Results for InsertRandomSpeedTest for N = 2000000:
BSTStringSet = 3.25 sec;
ECHashStringSet = 1.11 sec;
java.util.TreeSet = 2.72 sec;
java.util.Hash = 1.07 sec;

1c. Does your ECHashStringSet look roughly linear or roughly quadratic
in its scaling behavior for random strings?
It is roughly linear for its scaling behavior.



2a. Results for InsertInOrderSpeedTest for N = 10000:
BSTStringSet = 1.00 sec;
ECHashStringSet = 0.01 sec;
java.util.TreeSet = 0.01 sec;
java.util.HashSet = 0.00 sec;

2b. Results for InsertInOrderSpeedTest for N = 20000:
BSTStringSet = 2.95 sec;
ECHashStringSet = 0.01 sec;
java.util.TreeSet = 0.03 sec;
java.util.HashSet = 0.02 sec;



2c. Does your **BST**StringSet look roughly linear or roughly
quadratic in its scaling behavior for in order strings?
It is roughly linear time in its scaling behavior.

Before submitting, make sure that your ECHashStringSet is capable of
handling inputs of size 1000000 in a reasonable amount of time (a few
seconds).


